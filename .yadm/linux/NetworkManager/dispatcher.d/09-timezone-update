#!/bin/sh

set -eu

TIMEOUT_SECONDS=10

notify_send() {
    #Detect the name of the display in use
    local display=":$(ls /tmp/.X11-unix/* | sed 's#/tmp/.X11-unix/X##' | head -n 1)"

    #Detect the user using such display
    local user=$(who | grep '('$display')' | awk '{print $1}' | head -n 1)

    #Detect the id of the user
    local uid=$(id -u $user)

    sudo -u $user DISPLAY=$display DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$uid/bus notify-send "$@"
}

error_handler() {
    notify_send "timezone-update: ERROR" "$(cat $ERROR_FILE)"
}

ERROR_FILE=$(mktemp -t timezone-update.XXXXXX)
trap error_handler ERR
exec 2> $ERROR_FILE

case "$2" in
    connectivity-change)
        # uncomment for debug
        #notify_send "timezone-update: state:$CONNECTIVITY_STATE"
        [ "$CONNECTIVITY_STATE" != "FULL" ] && exit
        NEW_TIMEZONE=$(tzupdate --print-only --timeout $TIMEOUT_SECONDS)
        CURRENT_TIMEZONE=$(timedatectl show --property Timezone --value)
        # uncomment for debug
        #notify_send "timezone-update: new timezone:$NEW_TIMEZONE"
        #notify_send "timezone-update: current timezone:$CURRENT_TIMEZONE"
        if [ -n "$NEW_TIMEZONE" ] && [ "$NEW_TIMEZONE" != "$CURRENT_TIMEZONE" ]; then
            timedatectl set-timezone "$NEW_TIMEZONE"
            notify_send "timezone-update: changed - $NEW_TIMEZONE"
        fi
    ;;
esac
