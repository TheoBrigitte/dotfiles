#!/bin/bash

show_help() {
  local bin="$(basename "$0")"
  echo "Usage: $bin [OPTIONS] [GREP ARGUMENTS]"
  echo "Process JSON input from stdin, select and/or exclude specified fields, and format output as key=value pairs."
  echo "Allows further filtering with grep arguments."
  echo
  echo "Options:"
  echo "  -f, --field   <field1,field2,...>  Specify fields to pick from JSON input."
  echo "  -e, --exclude <field1,field2,...>  Specify fields to exclude from JSON input."
  echo "      --color <always|auto|never>    Set color output (default: auto)."
  echo "      --                             End of options, remaining arguments are passed to grep."
  echo "  -h, --help                         Show this help message and exit."
  echo
  echo "Example:"
  echo "  cat data.json | $bin -f name,age John"
  echo "  cat data.json | $bin -e password"
  echo "  cat data.json | $bin -f name,age -vE 'John|Doe'"
  echo "  cat data.json | $bin -f name,age -- -e ^John"
  exit
}

# Join strings with a delimiter
join_by() {
  local IFS="$1"; shift
  echo "$*"
}

# Prepare jq filters
# returns a filter formatted as "pick(.field1,.field2,...)" or "del(.field1,.field2,...)"
# returns . if no fields are specified
to_filter() {
  local filter="$1"; shift
  if [[ $# -eq 0 ]]; then
    echo "."
    return
  fi

  local fields_prefixed="$(printf ".%s\n" "$@")"
  local fields_joined="$(join_by , $fields_prefixed)"
  echo "${filter}($fields_joined)"
}

exit_error() {
  echo "ERROR: $1" >&2
  exit 1
}

main() {
  local fields_selected=()
  local fields_excluded=()
  # If stdout is a terminal set color to never
  local color=""; [[ -t 1 ]] || color="never"

  # Process arguments
  args=()
  while [[ $# -gt 0 ]]; do
    case $1 in
      -h|--help) show_help;;
      --color)
        [[ -z "${2-}" ]] && exit_error "$1 requires an argument."
        [[ "$2" != "auto" ]] && color="$2"
        shift;;
      -f|--field)
        [[ -z "${2-}" ]] && exit_error "$1 requires an argument."
        # Allow multiple fields to be specified, separated by commas
        IFS="," read -r -a fields <<< "$2"; shift
        fields_selected+=("${fields[@]}");;
      -e|--exclude)
        [[ -z "${2-}" ]] && exit_error "$1 requires an argument."
        # Allow multiple fields to be specified, separated by commas
        IFS="," read -r -a fields <<< "$2"; shift
        fields_excluded+=("${fields[@]}");;
      --) shift; break;; # End of options, remaining arguments are grep arguments.
      *) args+=("$1");;
    esac
    shift
  done

  set -- "${args[@]}"

  local pick_filter="$(to_filter pick "${fields_selected[@]}")"
  local del_filter="$(to_filter del "${fields_excluded[@]}")"

  # Process input from stdin
  # Use jq to parse JSON, pick specified fields, convert to key=value format.
  #   - fromjson? converts input to JSON and ignores errors
  #   - pick_filter selects specified fields
  #   - del_filter excludes specified fields
  #   - to_entries converts the object to an array of key-value pairs
  #   - map formats each key-value pair as "key=value"
  #   - join combines the array into a single string with spaces
  jq --stream --unbuffered --compact-output --raw-input --raw-output \
    'fromjson? | '"$pick_filter"' | '"$del_filter"' | to_entries | map("\(.key)=\(.value|tostring)") | join(" ")' |\
    # Use grep to filter lines based on the provided arguments
    grep --line-buffered --color="${color:-always}" "${@-}" |\
    # Use grep to colorize keys in blue, give precedence for matches from previous grep
    # - Ensure first key is colored
    # - Use ^ to print remaining lines without color
    # - Use lookbehind to match only non-colored values, no [ before the key
    GREP_COLORS='ms=01;34' grep --line-buffered --color="${color:-auto}" --perl-regexp "^\w+=|^|(?<=[^\[])\s\w+="
}

main "$@"
