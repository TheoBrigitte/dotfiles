#!/usr/bin/env bash

set -eu

print_usage() {
  echo "Usage:
  $(basename $0) <installation> / <cluster name>
  $(basename $0) <installation>   <cluster name>

Create kubeconfig for the given cluster."
}

# verify that kubectl context is present and its client certificate is still valid.
is_config_valid() {
  if ! kubectl config get-contexts "$1" &>/dev/null; then
    return 1
  fi

  CLIENT_CRT=$(kubectl config view -o=go-template --template='{{range $_,$ctx:=.contexts}}{{if eq $ctx.name "'"$1"'"}}{{range $_,$user:=$.users}}{{if eq $user.name $ctx.context.user}}{{index $user.user "client-certificate"}}{{end}}{{end}}{{end}}{{end}}')
  openssl x509 -in "${CLIENT_CRT}" -checkend 0 1>/dev/null
  return $?
}

if [ $# -lt 1 ] || [ "$1" == "-h" ]; then
  print_usage
  exit 0
fi

# replace / separator with space.
args=$(echo -n "$@" | sed -e 's/\// /g')

# bash will split words on spaces.
values=($args)

INSTALLATION="${values[0]}"
KUBE_CONTEXT="giantswarm-${values[0]}"

if [ ${#values[@]} -ge 2 ]; then
  CLUSTER="${values[1]}"
  KUBE_CONTEXT="giantswarm-${values[1]}"
fi

if ! is_config_valid "${KUBE_CONTEXT}"; then
  if [ -n "${CLUSTER+x}" ]; then
    (
      set -x
      gsctl select endpoint "${INSTALLATION}"
      gsctl create kubeconfig --certificate-organizations system:masters --ttl 1d -c "${CLUSTER}"
    )
  else
    (
      set -x
      opsctl create kubeconfig --ttl 1 -c "${INSTALLATION}"
    )
  fi
else
  kubectl config use-context "${KUBE_CONTEXT}"
fi

