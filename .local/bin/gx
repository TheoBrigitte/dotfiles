#!/usr/bin/env bash

set -eu

# Cache directory and file
CACHE_DIR="${HOME}/.cache/gx"
TSH_CLUSTER_CACHE="${CACHE_DIR}/tsh_kube_ls.json"
TSH_NODE_CACHE="${CACHE_DIR}/tsh_ls.json"

# Print usage
print_usage() {
  bin_name="$(basename $0)"
  echo "Usage: $bin_name <installation> [ <separator> <cluster> ]
               $bin_name login <installation> [ <separator> <cluster> ]
               $bin_name ssh <installation or cluster> <node>

Actions:
  login           Create kubeconfig for the given cluster or installation.
  ssh             SSH into the given node.

Arguments:

  <installation>  installation name
  <separator>     any non alphanumeric character
  <cluster>       cluster name
  <node>          node name"
}

echo_stderr() {
    >&2 echo "$@"
}

create_kubeconfig() {
  # replace separator with space
  args=$(echo -n "$@" | sed -e 's/[^[:alnum:]]/ /1')

  # split words on spaces
  values=($args)

  # installation is always the first value
  installation="${values[0]}"
  cluster=""

  # context_match is used to filter kubectl contexts by regex
  context_matcher="${installation}$"
  # tsh_matcher is used to filter tsh clusters by name
  tsh_matcher="${installation}"

  # if there are more than 2 values, the last one is the cluster
  values_length=${#values[@]}
  if [ $values_length -ge 2 ]; then
    cluster="${values[$values_length-1]}"
    context_matcher="${installation}-${cluster}"
    tsh_matcher="${installation}-${cluster}"
  fi

  # Check if the kubectl context already exists
  if CONTEXTS=$(kubectl config get-contexts -oname | grep "${context_matcher}"); then
    echo_stderr "► Checking for existing kubectl contexts"
    for c in $CONTEXTS; do
      # Test if the context is valid and switch to it if it is
      timeout 3s kubectl --context "${c}" get nodes &>/dev/null && \
        kubectx "${c}" && \
        exit 0
      done
  fi

  # Download and cache tsh clusters
  mkdir -p "${CACHE_DIR}"
  expiry="$(date -d '- 5 minutes' +%s)"
  if [ ! -f "${TSH_CLUSTER_CACHE}" ] || [ "$(stat --printf=%Y "${TSH_CLUSTER_CACHE}")" -le "$expiry" ]; then
    echo_stderr "► Downloading tsh clusters"
    tsh kube ls --format json > "${TSH_CLUSTER_CACHE}"
  fi

  # Check if the cluster exists in tsh
  tsh_ok="$(jq '.[] | select(.kube_cluster_name == "'"$tsh_matcher"'") | true' "${TSH_CLUSTER_CACHE}")"

  # use tsh or opsctl to login
  command=""
  if [ "$tsh_ok" == "true" ]; then
    command="tsh kube login "${tsh_matcher}""
  else
    command="opsctl login "${installation}" "${cluster}""
  fi

  (
    set -ex
    $command
  )
}

ssh_node() {
  # replace separator with space
  args=$(echo -n "$@" | sed -e 's/[^[:alnum:]]/ /1')

  # split words on spaces
  values=($args)

  # cluster is always the first value
  cluster_name="${values[0]}"
  node_name="${values[1]}"

  # Download and cache tsh nodes
  mkdir -p "${CACHE_DIR}"
  expiry="$(date -d '- 5 minutes' +%s)"
  if [ ! -f "${TSH_NODE_CACHE}" ] || [ "$(stat --printf=%Y "${TSH_NODE_CACHE}")" -le "$expiry" ]; then
    echo_stderr "> Downloading tsh machines"
    tsh ls --format json > "${TSH_NODE_CACHE}"
  fi

  # Check if the node exists in tsh
  node_matcher="$(echo "${node_name}" | cut -d'.' -f1)"
  tsh_ok="$(jq '.[] | select(.spec.hostname == "'"$node_matcher"'") | select(.metadata.labels["cluster"] == "'"$cluster_name"'") | true' "${TSH_NODE_CACHE}")"

  # use tsh or opsctl to ssh
  command=""
  if [ "$tsh_ok" == "true" ]; then
    command="tsh ssh root@cluster=${cluster_name},node=${node_matcher}"
  else
    command="opsctl ssh ${cluster_name} ${node_name}"
  fi

  (
    set -ex
    $command
  )
}

main() {
  # Require at least one argument
  if [ $# -lt 1 ] || [ "$1" == "-h" ]; then
    print_usage
    exit 0
  fi

  case "$1" in
    login)
      shift
      create_kubeconfig "$@"
      ;;
    ssh)
      shift
      ssh_node "$@"
      ;;
    *)
      create_kubeconfig "$@"
      ;;
  esac
}

main "$@"
