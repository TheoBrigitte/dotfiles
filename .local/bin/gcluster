#!/usr/bin/env bash

get_installation() {
	interactive=${1:-false}

	if $interactive; then
		name=$(opsctl list installations -s | tr ' ' '\n'|fzf --tac)
		gx "$name" &>/dev/null
	fi

	installation=$(kubectl config current-context | cut -d- -f2-)

	echo "$installation"
	return
}

get_release() {
	interactive=${1:-false}

	releases=$(kubectl get release --sort-by .spec.date -oyaml)
	len=$(echo "$releases" | yq -r '.items | length')
	release_candidates=()
	for (( i=$len-1; i>=0; i-- )); do
		name=$(echo "$releases" | yq -r ".items[$i].metadata.name")
		state=$(echo "$releases" | yq -r ".items[$i].spec.state")
		ready=$(echo "$releases" | yq -r ".items[$i].status.ready")
		#echo -e "> name  : $name\n  active: $state\n  ready : $ready"
		if echo "$name" | grep -vq "-" && [[ "$ready" == "true" ]]; then
			if $interactive; then
				release_candidates+=("$name")
			else
				echo "$name"
				return
			fi
		fi
	done

	if $interactive && [[ ${#release_candidates[@]} -gt 0 ]]; then
		name=$(printf '%s\n' "${release_candidates[@]}" | fzf)
		echo "$name"
	fi

	return
}

if [[ "$1" == "-h" ]] || [[ $# -lt 1 ]]; then
	echo "Usage: gcluster [options] <action> <name>

Manage giantswarm CAPI clusters.

Options
        -i        interactive mode (select release)

Arguments

        <action> : any valid kubectl verb (e.g. apply)
	<name>   : cluster name"
        exit 1
fi

if [[ $# -ge 3 ]]; then
	option="$1"
	action="$2"
	cluster_name=${3:-$USER}
else
	action="$1"
	cluster_name=${2:-$USER}
fi

interactive=false
if [[ "$option" == "-i" ]]; then
	interactive=true
fi

organization="${USER}"

echo "> name: $cluster_name"
echo "> organization: $organization"

echo -n "> installation: "
installation=$(get_installation $interactive)
if [[ -z "$installation" ]]; then
	echo "not found!"
	echo "> stopping"
	exit 0
fi
if echo "$installation" | grep -q '-'; then
	echo "$installation - invalid!"
	echo "> stopping"
	exit 0
fi
echo "$installation"

echo -n "> provider: "
provider=$(opsctl show installation -i "$installation" | yq -r .Provider)
echo "$provider"

echo -n "> release: "
release=$(get_release $interactive)
if [[ -z "$release" ]]; then
	echo "not found!"
	echo "> stopping"
	exit 0
fi
echo "$release"

echo -n "> availability zone: "
zone=$(kubectl get node -oyaml | yq -r '.items[0].metadata.labels["topology.kubernetes.io/zone"]')
if [[ -z "$zone" ]] || [[ "$zone" == "null" ]]; then
	echo "not found!"
	echo "> stopping"
	exit 0
fi
echo "$zone"

set -ex

case "$action" in
  "apply")
    kubectl gs template organization \
      --name "$organization" \
      | kubectl $action -f - || echo 1

    kubectl gs template cluster \
      --provider "$provider" \
      --release "$release" \
      --name "$cluster_name" \
      --organization "$organization" \
      --description "$cluster_name test cluster" \
      | kubectl $action -f -

    kubectl-gs template nodepool --provider "$provider" \
      --release "$release" \
      --cluster-name "$cluster_name" \
      --availability-zones "$zone" \
      --organization "$organization" \
      --description "$cluster_name nodepool" \
      | kubectl $action -f -
    ;;
  "delete")
    kubectl-gs template nodepool --provider "$provider" \
      --release "$release" \
      --cluster-name "$cluster_name" \
      --availability-zones "$zone" \
      --organization "$organization" \
      --description "$cluster_name nodepool" \
      | kubectl $action -f - || echo 1

    kubectl gs template cluster \
      --provider "$provider" \
      --release "$release" \
      --name "$cluster_name" \
      --organization "$organization" \
      --description "$cluster_name test cluster" \
      | kubectl $action -f - || echo 1

    kubectl gs template organization \
      --name "$organization" \
      | kubectl $action --wait=false -f - || echo 1
    ;;
  *)
    echo "invalid action: $action"
    exit 1
    ;;
esac

set +x

echo "> success"
