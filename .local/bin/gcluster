#!/usr/bin/env bash

# Helper function - prints a message to stderr
echo_stderr() {
    >&2 echo "$@"
}

# Helper function - prints an error message and exits
exit_error() {
    echo_stderr "Error: $1"
    exit 1
}

get_installation() {
	interactive=${1:-false}

	if $interactive; then
		name=$(opsctl list installations -s | tr ' ' '\n'|fzf --tac)
		gx "$name" &>/dev/null
	fi

	installation=$(kubectl config current-context | cut -d- -f2-)

	echo "$installation"
	return
}

get_release_vintage() {
	interactive=${1:-false}

	releases=$(kubectl get release -ojson)
	len=$(echo "$releases" | jq -r '.items | length')
	release_candidates=()
	for (( i=$len-1; i>=0; i-- )); do
		name=$(echo "$releases" | jq -r ".items[$i].metadata.name")
		state=$(echo "$releases" | jq -r ".items[$i].spec.state")
		ready=$(echo "$releases" | jq -r ".items[$i].status.ready")
		#echo -e "> name  : $name\n  active: $state\n  ready : $ready"
		if echo "$name" | grep -vq "-" && [[ "$ready" == "true" ]]; then
			if $interactive; then
				release_candidates+=("$name")
			else
				echo "$name"
				return
			fi
		fi
	done

	if $interactive && [[ ${#release_candidates[@]} -gt 0 ]]; then
		name=$(printf '%s\n' "${release_candidates[@]}" | fzf)
		echo "$name"
	fi

	return
}

get_release_capi() {
	interactive=${1:-false}

	releases=$(kubectl get release -ojson)
	len=$(echo "$releases" | jq -r '.items | length')
	release_candidates=()
	for (( i=$len-1; i>=0; i-- )); do
		name=$(echo "$releases" | jq -r ".items[$i].metadata.name")
		state=$(echo "$releases" | jq -r ".items[$i].spec.state")
		ready=$(echo "$releases" | jq -r ".items[$i].status.ready")
		#echo -e "> name  : $name\n  active: $state\n  ready : $ready"
    if [ $(echo "$name" | grep -o - | wc -l) -lt 2 ] && [[ "$state" == "active" ]]; then
      release_name="$(echo "$name" | cut -d- -f2)"
			if $interactive; then
				release_candidates+=("$release_name")
			else
				echo "$release_name"
				return
			fi
		fi
	done

	if $interactive && [[ ${#release_candidates[@]} -gt 0 ]]; then
		name=$(printf '%s\n' "${release_candidates[@]}" | fzf)
		echo "$name"
	fi

	return
}

if [[ "$1" == "-h" ]] || [[ $# -lt 1 ]]; then
	echo "Usage: gcluster [options] <action> <name>

Manage giantswarm CAPI clusters.

Options
    -i           interactive mode (select release)
    -u|--until   keep cluster until date (default: today)
    --nodes-max  maximum number of cluster nodes (default: 10)
    --nodes-min  minimum number of cluster nodes (default: 3)

Arguments

        <action> : any valid kubectl verb (e.g. apply)
	<name>   : cluster name"
        exit 1
fi

interactive=false
nodes_max=10
nodes_min=3
until=$(date -d tomorrow --utc +"%Y-%m-%d")

ARGS=$(getopt -o 'iu:' --long 'interactive,nodes-max:,nodes-min:,until:' -- "$@")
eval set -- "$ARGS"

while true; do
  case "$1" in
    '--interactive')
      interactive=true
      shift
      continue
      ;;
    '--nodes-max')
      nodes_max=$2
      shift 2
      continue
      ;;
    '--nodes-min')
      nodes_min=$2
      shift 2
      continue
      ;;
    '-u'|'--until')
      until=$(date -d "$2" --utc +"%Y-%m-%d")
      shift 2
      continue
      ;;
    '--')
      shift
      break
      ;;
    *)
      exit_error 'Internal error!'
      ;;
  esac
done
action=${@:$OPTIND:1}
shift

cluster_name=${@:$OPTIND:1}
cluster_name=${cluster_name:-$USER}
shift

organization="${USER}"

#echo "> name: $cluster_name"
#echo "> organization: $organization"

cluster_namespace=$(kubectl get cl -Algiantswarm.io/cluster=$cluster_name -ojson|jq -r '.items[0].metadata.namespace')

case "$action" in
  "list")
    kubectl gs get clusters -A
    exit
    ;;
  "status")
    clusterctl describe cluster "$cluster_name" --namespace="$cluster_namespace" --show-conditions=all
    exit
    ;;
  "keep")
    kubectl label cluster "$cluster_name" \
      --namespace="$cluster_namespace" \
      --overwrite=true \
      keep-until="$until"
    exit
    ;;
esac

echo -n "> installation: "
installation=$(get_installation $interactive)
if [[ -z "$installation" ]]; then
	echo "not found!"
	echo "> stopping"
	exit 0
fi
if echo "$installation" | grep -q '-'; then
	echo "$installation - invalid!"
	echo "> stopping"
	exit 0
fi
echo "$installation"

echo -n "> provider: "
provider=$(opsctl show installation -i "$installation" -ojson | jq -r .Provider)
echo "$provider"

echo -n "> release: "
release_arg=""
if [[ ! "$provider" =~ ^cap.+ ]]; then
  release=$(get_release_vintage $interactive)
  if [[ -z "$release" ]]; then
    echo "not found!"
    echo "> stopping"
    exit 0
  fi
  release_arg="--release $release"
else
  release=$(get_release_capi $interactive)
  if [[ -z "$release" ]]; then
    echo "not found!"
    echo "> stopping"
    exit 0
  fi
  release_arg="--release $release"
fi
echo "$release"

echo -n "> availability zone: "
zone=$(kubectl get node -ojson | jq -r '.items[0].metadata.labels["topology.kubernetes.io/zone"]')
if [[ -z "$zone" ]] || [[ "$zone" == "null" ]]; then
	echo "not found!"
	echo "> stopping"
	exit 0
fi
echo "$zone"

case "$action" in
  "apply")
    set -ex
    kubectl gs template organization \
      --name "$organization" \
      | kubectl $action -f - || echo 1

    kubectl gs template cluster \
      --provider "$provider" \
      $release_arg \
      --name "$cluster_name" \
      --label "keep-until=$until" \
      --organization "$organization" \
      --description "$cluster_name test cluster" \
      | kubectl $action -f -

    if [[ ! "$provider" =~ ^cap.+ ]]; then
      kubectl-gs template nodepool --provider "$provider" \
        $release_arg \
        --cluster-name "$cluster_name" \
        --availability-zones "$zone" \
        --organization "$organization" \
        --description "$cluster_name nodepool" \
        --nodes-max "$nodes_max" \
        --nodes-min "$nodes_min" \
        | kubectl $action -f -
    fi
    ;;
  "delete")
    set -ex
    if [[ ! "$provider" =~ ^cap.+ ]]; then
      kubectl-gs template nodepool --provider "$provider" \
        --release "$release" \
        --cluster-name "$cluster_name" \
        --availability-zones "$zone" \
        --organization "$organization" \
        --description "$cluster_name nodepool" \
        --nodes-max "$nodes_max" \
        | kubectl $action --wait=false --ignore-not-found=true -f - || echo 1
    fi

    kubectl gs template cluster \
      --provider "$provider" \
      --release "$release" \
      --name "$cluster_name" \
      --organization "$organization" \
      --description "$cluster_name test cluster" \
      | kubectl $action --wait=false --ignore-not-found=true -f - || echo 1
    ;;
  *)
    echo "invalid action: $action"
    exit 1
    ;;
esac

set +x

echo "> success"
