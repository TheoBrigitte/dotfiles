#!/bin/bash

set -euo pipefail

usage() {
  cat <<-EOF
	Usage: $(basename "$0") [options] [command]

	This script downloads and installs single binary tools into the destination directory.

	Commands:
	  install    Install the specified tools (default).
	  uninstall  Uninstall the specified tools.

	Options:
	      --config  config_file     Path to the configuration file (default: $DEFAULT_CONFIG_FILE).
	      --tools  tool1,tool2,...  Comma-separated list of tools to install (default: all tools).
	      --check-only              Check if the tools are installed and up to date.
	      --list                    List the installed tools and their versions.
	      --debug                   Enable debug mode.
	  -h, --help                    Show this help message.
EOF
}

# Initialize the configuration file with default values if it doesn't exist
init_config() {
  local config_file="$1"

  test -f "$config_file" && return 0

  cat <<-EOF > "$config_file"
	# fetch-tools configuration file
	#
	# This file contains the configuration for tools to be installed.
	# Each tool is defined by a prefix and settings specifying how to fetch it.
	# The format used is prefix_setting=value, and must be valid bash syntax.
	# prefix is the name of the destination binary file name (only alphanumeric characters, dashes and underscores are allowed).
	#
	# SETTINGS
	# destination_dir:         destination directory for the binaries (default: $DEFAULT_DESTINATION_DIR)
	# prefix_method:           method to install the tool (allowed values: archive, golang) (default: archive)
	# prefix_version:          version of the tool to be installed (latest or a specific version) (required)
	#                          when using latest, prefix_repository must be set.
	# prefix_repository:       git repository to fetch the latest version from (optional)
	# prefix_version_pattern:  regex pattern to match the version tags found in prefix_repository (optional, default: $DEFAULT_VERSION_PATTERN)
	# prefix_origin:           origin where to get the tool from (required)
	#                          Placeholders {VERSION} and {VERSION_NOV} will be replaced with the version and version without the v prefix, respectively.
	# prefix_path:             path to the binary inside the archive (default to prefix)
	# prefix_strip_components: number of components to strip from the archive (only for tar archives) (default: 1)
	#
	# EXAMPLE
	# destination_dir=~/bin
	# yq_version=latest
	# yq_origin=https://github.com/mikefarah/yq/releases/download/{VERSION}/yq_linux_amd64
	# yq_repository=https://github.com/mikefarah/yq
	EOF
}

# Default values
DEFAULT_CONFIG_FILE="$HOME/.config/fetch-tools.conf"
DEFAULT_COMMAND="install"
DEFAULT_DESTINATION_DIR="$HOME/.local/bin"
DEFAULT_VERSION_PATTERN="v([0-9]+\.){2}[0-9]+$"
DEFAULT_BIN_FORMAT="{BIN}-{VERSION}"

# Global variables
DEBUG=false
KEY_MAX_LENGTH=4

# Logging colors
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NO_COLOR='\033[0m'

# Print tool message
log() {
  local key="$1"
  local version="${2:-}"
  local message="${3:-}"

  test -z "$version" && version=$'\t'
  printf "%b%-${KEY_MAX_LENGTH}s%b %b%s%b\t%b\n" "$BLUE" "$key" "$NO_COLOR" "$ORANGE" "$version" "$NO_COLOR" "$message"
}

# Print message with a specific level
echo_log() {
  local level="$1"; shift
  local color

  case "$level" in
    info)     color="$CYAN";;
    warning)  color="$ORANGE";;
    error)    color="$RED";;
    *)        color="$NO_COLOR";;
  esac

  echo -e "${color}${level^^}${NO_COLOR}\t" "$@"
}

exit_log() {
  local level="$1"; shift
  echo_log "$level" "$@"
  exit 1
}

# Move the cursor up one line and clear the line
echo_up() {
  $DEBUG && return 0
  echo -en "\r\033[A\033[2K"
}

# Print to stderr
echo_stderr() {
  echo -e "$@" 1>&2
}

# Install using go
# Use go install and move the binary to the destination
method_go_install() {
  local key="$1"
  local version="$2"
  local destination_dir="$3"
  local destination="$4"

  local origin; origin="$(get_config_format "$key" "origin" "" "$version")"
  if [[ -z "$origin" ]]; then
    echo_stderr "origin not found"
    return 1
  fi

  local path; path="$(get_config_format "$key" "path" "$key" "$version")"
  local tmp_dir="$TMP_DIR/$key"
  mkdir -p "$tmp_dir"

  GOBIN="$tmp_dir" go install  -v "$origin" 2>&1

  install --no-target-directory --mode=0755 "$tmp_dir/$path" "$destination"
}

method_verify() {
  local paths="$1"
  local mode="$2"

  for path in "${paths[@]}"; do
    _path="$(echo "$path" | cut -sd: -f1)"
    _bin="$(echo "$path" | cut -sd: -f2)"
    if [[ -z "$_path" ]] || [[ -z "$_bin" ]]; then
      echo_stderr "invalid path format: $path"
      return 1
    fi

    # TODO: are we passing $_bin or $_path to get_bin_format? here and later
    local bin_name; bin_name="$(get_bin_format "$_bin" "$version")"
    local destination="${destination_dir}/${bin_name}"
    # TODO: whats with key? is it always the same as _bin?
    local destination_linkname="${destination_dir}/${key}"

    if [[ -f "$destination" ]] && [[ "$destination" -ef "$destination_linkname" ]]; then
      continue
    fi

    [[ -z "$mode" ]] && continue

    local destination_linkname_target; destination_linkname_target="$(readlink -f "$destination_linkname")"

    if [[ ! -f "$destination_linkname_target" ]]; then
      #log "$key" "$version" "${RED}not found${NO_COLOR}"
      echo "$bin_name"
      return 1
    fi

    local basename="${destination_linkname_target##*/}"
    local bin_pattern; bin_pattern="$(get_bin_format "$_bin" "($pattern)")"
    local current_version; current_version="$(echo "$basename" | sed -nE "s/${bin_pattern}/\1/p")"
    if [[ -z "$current_version" ]]; then
      #log "$key" "$version" "${RED}invalid${NO_COLOR}"
      echo "$bin_name"
      return 2
    fi

    if [[ "$mode" != "list" ]] && [[ "$version" != "$current_version" ]]; then
      #log "$key" "$current_version" "${PURPLE}outdated${NO_COLOR}\t new version $version"
      echo "$bin_name"
      return 3
    fi
  done
}

# Extra installation for golang
# This is a specific case for the golang toolchain only
method_extra_golang_install() {
  local destination="$4"

  "${destination}" download 2>&1
}

# Extra uninstallation for golang
# This is a specific case for the golang toolchain only
method_extra_golang_uninstall() {
  local destination_linkname="$3"

  if goroot="$("$destination_linkname" env GOROOT)"; then
    rm -r "$goroot"
  fi
}

# Install from an archive
# Use curl to download from the URL, then extract the archive and install the binary
# Raw binary is also supported
# Supported archives: tar and zip
method_archive_install() {
  local key="$1"
  local version="$2"
  local destination_dir="$3"
  local destination="$4"

  local origin; origin="$(get_config_format "$key" "origin" "" "$version")"
  if [[ -z "$origin" ]]; then
    echo_stderr "origin not found"
    return 1
  fi

  local archivefile="$TMP_DIR/${origin##*/}"
  local archive_path; archive_path="$(get_config_format "$key" "path" "$key" "$version")"
  local strip_components; strip_components="$(get_config "$key" "strip_components" 1)"
  # Magic trick to both capture and print curl stderr
  # This is to show the progress bar and capture the error message if any
  exec 3>&1
  if ! output="$(curl -# --fail --connect-timeout 3 --location --output "$archivefile" "$origin" 2>&1 | tee >(cat - >&3))"; then
    echo_stderr "${output}"
    return 1
  fi

  # extract the archive
  local archivedir="${archivefile}.extracted"
  mkdir -p "$archivedir"

  case "$archivefile" in
    *.tar*)
      tar --extract --gzip --file "$archivefile" \
        --directory "$archivedir" \
        --strip-components "$strip_components" 1> /dev/null
      ;;
    *.zip)
      unzip -q "$archivefile" -d "$archivedir" "$archive_path" 1> /dev/null
      ;;
    *)
      # assuming it's a binary
      mv "$archivefile" "$archivedir/$archive_path"
      ;;
  esac

  # install the binary to the destination
  install --no-target-directory --mode=0755 "$archivedir/$archive_path" "$destination"
}

# Install tool in the specified destination directory.
install_command() {
  local mode="$1"; shift
  local destination_dir="$1"; shift
  local key="$1"; shift

  local bin; bin="$(get_config "$key" "bin" "$key")"
  local version; version="$(get_config "$key" "version")"
  local pattern; pattern="$(get_config "$key" "version_pattern" "$DEFAULT_VERSION_PATTERN")"

  log "$key" "$version" "processing ..."

  # Either version or repository must be set
  # if both are set, prefer version
  # repository is used to fetch the latest version
  if [[ -z "$version" ]] || [[ "$version" = "latest" ]]; then
    local repository; repository="$(get_config "$key" "repository")"
    if [[ -z "$repository" ]]; then
      log "$key" "" "repository not configured"
      return 1
    fi

    if [[ "$mode" != "list" ]]; then
      echo_up
      log "$key" "" "fetching latest version ..."
      version="$(git ls-remote --tags --sort version:refname "$repository" | awk '{print $2}' | cut -d/ -f3 | grep -E "$pattern" | tail -n 1)"
    fi
  fi

  local paths; IFS=' ' read -r -a paths <<< "$(get_config_format "$key" "path" "$key:$key" "$version")"

  ## Replace logic with method_verify
  ## Always run method_verify to check if the binary is already installed, pass the mode so it can do additional checks when asked to
  ## From here  ##
  local bin_name; bin_name="$(get_bin_format "$bin" "$version")"
  local destination="${destination_dir}/${bin_name}"
  local destination_linkname="${destination_dir}/${bin}"

  if [[ -f "$destination" ]] && [[ "$destination" -ef "$destination_linkname" ]]; then
    echo_up
    log "$key" "$version" "${GREEN}installed${NO_COLOR}"
    return 0
  fi

  local destination_linkname_target; destination_linkname_target="$(readlink -f "$destination_linkname")"

  if [[ -n "$mode" ]]; then
    if [[ ! -f "$destination_linkname_target" ]]; then
      echo_up
      log "$key" "$version" "${RED}not found${NO_COLOR}"
      return 0
    fi

    local basename="${destination_linkname_target##*/}"
    local bin_pattern; bin_pattern="$(get_bin_format "$bin" "($pattern)")"
    local current_version; current_version="$(echo "$basename" | sed -nE "s/${bin_pattern}/\1/p")"
    if [[ -z "$current_version" ]]; then
      echo_up
      log "$key" "$version" "${RED}invalid${NO_COLOR}"
      return 0
    fi

    if [[ "$mode" != "list" ]] && [[ "$version" != "$current_version" ]]; then
      echo_up
      log "$key" "$current_version" "${PURPLE}outdated${NO_COLOR}\t new version $version"
      return 0
    fi
  ## Until here ##
  ## Skip install logic if mode is set
  else
    local method; method="$(get_config "$key" "method" "archive")"
    if ! declare -F "method_${method}_install" &> /dev/null; then
      echo_stderr "unknown method $method"
      return 1
    fi

    echo_up
    log "$key" "$version" "installing"
    "method_${method}_install" "$key" "$version" "$destination_dir" "$destination" | stdbuf -o0 tr '\n' '\r'

    local extra_method; extra_method="$(get_config "$key" "method_extra")"
    if declare -F "method_extra_${extra_method}_install" &> /dev/null; then
      echo_up
      log "$key" "$version" "installing extra"
      "method_extra_${extra_method}_install" "$key" "$version" "$destination_dir" "$destination" | stdbuf -o0 tr '\n' '\r'
    fi

    # remove previous linked file
    test -f "$destination_linkname_target" && rm "$destination_linkname_target"

    ln -rfs "$destination" "$destination_linkname"
  fi

  echo_up
  log "$key" "$version" "${GREEN}installed${NO_COLOR}"
}

uninstall_command() {
  local mode="$1"; shift
  local destination_dir="$1"; shift
  local key="$1"; shift

  log "$key" "" "processing"

  local bin; bin="$(get_config "$key" "bin" "$key")"
  local destination_linkname="${destination_dir}/${bin}"

  local extra_method; extra_method="$(get_config "$key" "method_extra")"
  if declare -F "method_extra_${extra_method}_uninstall" &> /dev/null; then
    echo_up
    log "$key" "" "uninstalling extra"
    "method_extra_${extra_method}_uninstall" "$key" "$destination_dir" "$destination_linkname" | stdbuf -o0 tr '\n' '\r'
  fi

  echo_up
  log "$key" "" "uninstalling"
  rm -f "$destination_linkname"

  local pattern; pattern="$(get_config "$key" "version_pattern" "$DEFAULT_VERSION_PATTERN")"
  local bin_pattern; bin_pattern="$(get_bin_format "$bin" "$pattern")"
  local destination_pattern="${destination_dir}/${bin_pattern}"
  find "$destination_dir" -type f -regextype posix-egrep -regex "$destination_pattern" -delete

  echo_up
  log "$key" "" "uninstalled"
}

get_bin_format() {
  local bin_format="$DEFAULT_BIN_FORMAT"
  local output="${bin_format//"{BIN}"/$1}"
  echo "${output//"{VERSION}"/$2}"
}

# Get configuration value for a specific key
# The key is in the format prefix_setting, where prefix is the name of the tool and setting is the configuration setting.
# If the value is not set, it returns the default value provided as the third argument.
get_config() {
  local varname="${1}_${2}"
  echo "${!varname:-${3:-}}"
}

get_config_format() {
  local value; value="$(get_config "$1" "$2" "$3")"
  local version="${4}"
  local version_nov="${version#v}"

  local output
  output="${value//"{BIN}"/$1}"
  output="${output//"{VERSION}"/$version}"
  output="${output//"{VERSION_NOV}"/$version_nov}"
  echo "$output"
}

get_keys() {
  local config_file="$1"
  grep -sE '^[^#]' "$config_file" | sed -nE 's/^([a-zA-Z0-9_-]+)_version=.+$/\1/p'
}

set_key_max_length() {
  for key in "$@"; do
    local length="${#key}"
    if [[ "$length" -gt "$KEY_MAX_LENGTH" ]]; then
      KEY_MAX_LENGTH="$length"
    fi
  done
}

check_destination_dir() {
  if ! echo "${PATH//:/$'\n'}" | grep -qE "^$DEFAULT_DESTINATION_DIR$"; then
    echo_log warning "\$PATH does not contain $DEFAULT_DESTINATION_DIR"
  fi
}

run() {
  local cmd="$1"; shift
  local mode="$1"; shift
  local destination_dir="$1"; shift

  # Process each tool
  set +e
  for key in "$@"; do
    if [[ ! -v "${key}_version" ]]; then
      log "$key" "" "version not configured"
      continue
    fi

    # Magic trick to capture stderr, print stdout
    # Interrupt $cmd on error and continue with the next tool
    {
      error="$({
        set -e
        "$cmd" "$mode" "$destination_dir" "$key" 1>&3
      } 2>&1 )"
    } 3>&1

    test $? -eq 0 && continue
    error="${RED}failed${NO_COLOR} - $error"
    [[ -z "$error" ]] && error="${RED}failed${NO_COLOR} processing"

    echo_up
    log "$key" "" "$error"
  done
  set -e
}

main() {
  TMP_DIR="$(mktemp -d -t fetch-tools-XXXXXXXXXX)"
  trap 'rm -rf "$TMP_DIR"' EXIT

  # Arguments
  local config_file="$DEFAULT_CONFIG_FILE"
  local destination_dir="$DEFAULT_DESTINATION_DIR"
  local keys=()
  local no_header=false
  local mode=""

  # Process arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
      --check-only) mode="check";;
      --config)
        config_file="${2:-}"
        [[ -z "$config_file" ]] && exit_log error "--config requires an argument"
        shift;;
      --debug) DEBUG=true;;
      -h|--help)
        usage
        exit;;
      --list) mode="list";;
      --no-header) no_header=true;;
      --tools)
        # Parse the comma-separated list of keys
        IFS=, read -r -a keys <<< "${2:-}"
        [[ "${#keys[@]}" -eq 0 ]] && exit_log error "--tools requires an argument"
        shift;;
      -?*) exit_log error "unknown option $1";;
      *) break;; # No more options.
    esac
    shift
  done

  local cmd="${1:-$DEFAULT_COMMAND}_command"

  # Check if the command exists
  declare -F "$cmd" &> /dev/null || exit_log error "unknown command $1"

  # Ensure the config file is initialized
  init_config "$config_file"
  # Load the config file
  # shellcheck source=/dev/null
  source "${config_file}" &>/dev/null || exit_log error "failed loading config $config_file"

  # Check if the destination directory is in PATH
  check_destination_dir
  # Create the destination directory if it doesn't exist
  mkdir -p "$destination_dir"

  # If no keys are provided, use all keys found in the config file
  [[ "${#keys[@]}" -eq 0 ]] && readarray -t keys < <(get_keys "$config_file")
  [[ "${#keys[@]}" -eq 0 ]] && exit_log warning "no tools configured in $config_file"

  # Set the maximum length of the keys for formatting
  set_key_max_length "${keys[@]}"

  # Print the header if not suppressed
  ! $no_header && printf "%-${KEY_MAX_LENGTH}s %s\t%s\n" "tool" "version" "status"
  # Run the command
  run "$cmd" "$mode" "$destination_dir" "${keys[@]}"
}

main "$@"
