#!/usr/bin/env bash

set -eu

# Variables
#
# USERNAME is the ssh login name for vpn hosts
USERNAME="${USER}"
# VPN_PORT is the ssh port for vpn hosts
VPN_PORT=2222
# VPN_TLD is the top-level domain for vpn hosts
VPN_TLD="io"
# CONNECTION_SUFFIX is used to build connection names
CONNECTION_SUFFIX=".giantswarm"
# CONNECTION_NAMES are the name used for both NetworkManager connection name and as vpn host name (without tld)
CONNECTION_NAMES="vpn${CONNECTION_SUFFIX} vpn2${CONNECTION_SUFFIX}"

# Functions

print_usage() {
  echo "Usage:
  $(basename $0) [ status [ <name> ] ]  list connections state (default action)
  $(basename $0) on|off [ <name> ]      enable or disable a connection (default name=vpn)
  $(basename $0) update-config          re-create connections with up to date OpenVPN configuration
  $(basename $0) setup [ --dry-run ]    configure environement to work with OpenVPN
  $(basename $0) uninstall              uninstall environement created with the setup command
  $(basename $0) help                   print this help

Manage OpenVPN connections via NetworkManager

Arguments
  <name>		name prefix of the vpn connection (e.g. vpn)"
}

# get_connection return a single connection name
# (optional) $1 is the vpn connection name prefix
get_connection() {
	connection_prefix="${1:-vpn}"
	connections="$(nmcli connection | grep "${connection_prefix}${CONNECTION_SUFFIX}" | sort -r | awk '{print $1}')"

	echo "$connections" | head -n 1
}

# list_connections returns all connection names
list_connections() {
	echo "$CONNECTION_NAMES"
}

# Arguments
ACTION="${1:-status}"

if [ "${ACTION}" == "status" ]; then
	for connection in $(list_connections); do
		if current_status="$(nmcli --terse --get-values GENERAL.STATE connection show "${connection}" 2>/dev/null)"; then
			status="$(echo "$current_status" | grep -q 'activated' && echo 'on' || echo 'off')"
		else
			status="not-configured"
		fi
		echo "> ${connection} ${status}"
	done

	exit 0
fi

if [ "${ACTION}" == "on" ]; then
	connection_prefix="${2:-}"
	connection="$(get_connection "$connection_prefix")"

	echo "> enable ${connection}"
	nmcli connection up "${connection}"

	exit 0
fi

if [ "${ACTION}" == "off" ]; then
	connection_prefix="${2:-}"
	connection="$(get_connection "$connection_prefix")"

	echo "> disable ${connection}"
	nmcli connection down "${connection}"

	exit 0
fi

if [ "${ACTION}" == "setup" ]; then
	dry_run=false
	if [ "${2:-}" == "--dry-run" ]; then
		dry_run=true
	fi

	# run is a wrapper function to support dry-run mode.
	# dry-run=true  : will only print the command but not execute it
	# dry-run=false : will print and execute the command
	run(){
		if $dry_run; then
			echo $@
		else
		(
			set -x
			$@
		)
		fi
	}

	echo "> Checking /etc/resolv.conf"
	if ! cat /etc/resolv.conf | grep -q '/run/systemd/resolve/stub-resolv.conf'; then
		echo "> Updating /etc/resolv.conf to be managed by systemd-resolved"
		# Remove existing resolv.conf to get rid of any symlink
		run sudo rm -f /etc/resolv.conf
		# Enable systemd-resolved
		run sudo ln -sv /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
	fi

	if ! systemctl is-active --quiet systemd-resolved.service; then
		echo "> Enabling systemd-resolved"
		run sudo systemctl enable --now systemd-resolved.service
		# Wait for resolv.conf to be populated
		echo -n "> waiting for dns resolver "
		connection="$(get_connection)"
		while ! host "${connection}.${VPN_TLD}" 1>/dev/null; do
			echo -n "."
			sleep 1
		done
		echo
	fi
	echo "> All good, /etc/resolv.conf is managed by systemd-networkd"

	echo "> Installing /etc/NetworkManager/dispatcher.d/10-openvpn"
	cat <<-EOF | run sudo tee /etc/NetworkManager/dispatcher.d/10-openvpn
	#!/bin/sh
	case "\$2" in
	  up)
	    if [[ "\$CONNECTION_ID" =~ ^vpn.*\.giantswarm ]]; then
	      if [ ! -f "/var/run/\${CONNECTION_ID}.pid" ]; then
	        echo "start \$CONNECTION_ID"
	        openvpn --verb 3 --daemon --syslog --writepid "/var/run/\${CONNECTION_ID}.pid" --config "$HOME/.config/vpn/\${CONNECTION_ID}.conf"
	        echo "started \$CONNECTION_ID as pid:\$(</var/run/\${CONNECTION_ID}.pid)"
	      else
	        echo "already started \$CONNECTION_ID as pid:\$(</var/run/\${CONNECTION_ID}.pid)"
	      fi
	    fi
	    ;;
	  down)
	    if [[ "\$CONNECTION_ID" =~ ^vpn.*\.giantswarm ]]; then
	      if [ -f "/var/run/\${CONNECTION_ID}.pid" ]; then
	        pid=\$(</var/run/\${CONNECTION_ID}.pid)
	        echo "stop \$CONNECTION_ID pid:\$pid"
	        kill \$pid
	        # wait for openvpn to stop, otherwise restarts will fail.
	        waitpid \$pid
	        echo "stopped \$CONNECTION_ID pid:\$pid"
	      else
	        echo "already stopped \$CONNECTION_ID"
	      fi
	    fi
	    ;;
	esac
	EOF
	run sudo chmod +x /etc/NetworkManager/dispatcher.d/10-openvpn

	echo "> Checking update-systemd-resolved"
	if ! command -vp update-systemd-resolved &>/dev/null; then
		echo "> Installing update-systemd-resolved"
		curl --progress-bar -O https://raw.githubusercontent.com/jonathanio/update-systemd-resolved/master/update-systemd-resolved
		chmod +x update-systemd-resolved
		sudo mv update-systemd-resolved /usr/bin/update-systemd-resolved
	else
		echo "> All good, update-systemd-resolved is installed"
	fi

	echo "> done"

	exit 0
fi

if [ "${ACTION}" == "uninstall" ]; then
	echo "> Removing /etc/NetworkManager/dispatcher.d/10-openvpn"
	sudo rm -f /etc/NetworkManager/dispatcher.d/10-openvpn
	echo "> Removing update-systemd-resolved"
	sudo rm -f /usr/bin/update-systemd-resolved
	echo "> Removing /etc/resolv.conf"
	sudo rm -f /etc/resolv.conf
	echo "> Disabling systemd-resolved"
	sudo systemctl disable --now systemd-resolved
	echo "> Restarting NetworkManager"
	sudo systemctl restart NetworkManager.service

	echo "> done"

	exit 0
fi

if [ "${ACTION}" == "update-config" ]; then
	# Create temporary directory to store OpenVPN configuration files
	TMP_DIR=$(mktemp --tmpdir --directory vpn.XXXXX)
	trap "rm -r $TMP_DIR" EXIT

	for connection in $(list_connections); do
		echo "> update-config for ${connection}"

		# Delete existing connection
		if nmcli --terse --get-values connection.uuid connection show "${connection}" &> /dev/null; then
			echo "  delete existing connection from NetworkManager"
			echo -n "  "
			nmcli connection delete "${connection}"
		fi

		# Get new connection config
		echo "  get connection config from ${connection}.${VPN_TLD}"
		scp -qP "$VPN_PORT" "${USERNAME}@${connection}.${VPN_TLD}:${USERNAME}.ovpn" "$TMP_DIR/${connection}.conf"
		sed -i '\#up /etc/openvpn/scripts/update-systemd-resolved#d' "$TMP_DIR/${connection}.conf"
		sed -i '\#down /etc/openvpn/scripts/update-systemd-resolved#d' "$TMP_DIR/${connection}.conf"
		sed -i '\#down-pre#d' "$TMP_DIR/${connection}.conf"

		# Import connection config
		echo "  import connection config into NetworkManager"
		echo -n "  "
		nmcli connection import type openvpn file "$TMP_DIR/${connection}.conf"

		echo "  set connection options"
		# Set option: Use this connection only for resources on its network
		nmcli connection modify "${connection}" ipv4.never-default true
		nmcli connection modify "${connection}" ipv6.never-default true
	done

	exit 0
fi

print_usage

test "${ACTION}" == "help"
exit $?
