#!/usr/bin/env bash

set -eu

# Variables
#
# USERNAME is the ssh login name for vpn hosts
USERNAME="${USER}"
# VPN_PORT is the ssh port for vpn hosts
VPN_PORT=2222
# VPN_TLD is the top-level domain for vpn hosts
VPN_TLD="io"
# CONNECTION_SUFFIX is used to build connection names
CONNECTION_SUFFIX=".giantswarm"
# CONNECTION_NAMES are the name used for both NetworkManager connection name and as vpn host name (without tld)
CONNECTION_NAMES="vpn${CONNECTION_SUFFIX} vpn2${CONNECTION_SUFFIX}"

# Functions

print_usage() {
  echo "Usage:
  $(basename $0) [ status [ <name> ] ]  list connections state (default action)
  $(basename $0) on|off [ <name> ]      enable or disable a connection (default name=vpn)
  $(basename $0) update-config          re-create connections with up to date OpenVPN configuration
  $(basename $0) setup [ --dry-run ]    configure environement to work with OpenVPN
  $(basename $0) help                   print this help

Manage OpenVPN connections via NetworkManager

Arguments
  <name>		name prefix of the vpn connection (e.g. vpn)"
}

# get_connection return a single connection name
# (optional) $1 is the vpn connection name prefix
get_connection() {
	connection_prefix="${1:-vpn}"
	connections=$(nmcli connection | grep "${connection_prefix}${CONNECTION_SUFFIX}" | sort -r | awk '{print $1}')

	echo "$connections" | head -n 1
}

# list_connections returns all connection names
list_connections() {
	echo "$CONNECTION_NAMES"
}

# Arguments
ACTION=${1:-status}
CONNECTION_PREFIX=${2:-}

if [ "${ACTION}" == "status" ]; then
	for connection in $(list_connections); do
		if current_status=$(nmcli --terse --get-values GENERAL.STATE connection show "${connection}"); then
			status=$(echo "$current_status" | grep -q 'activated' && echo 'on' || echo 'off')
		else
			status="not-configured"
		fi
		echo "> ${connection} ${status}"
	done

	exit 0
fi

if [ "${ACTION}" == "on" ]; then
	connection=$(get_connection "$CONNECTION_PREFIX")

	echo "> enable ${connection}"
	nmcli connection up "${connection}"
	
	exit 0
fi

if [ "${ACTION}" == "off" ]; then
	connection=$(get_connection "$CONNECTION_PREFIX")

	echo "> disable ${connection}"
	nmcli connection down "${connection}"
	
	exit 0
fi

if [ "${ACTION}" == "setup" ]; then
	dry_run=false
	if [ "${2:-}" == "--dry-run" ]; then
		dry_run=true
	fi
	run(){
		if $dry_run; then
			echo $@
		else
		(
			set -x
			$@
		)
		fi
	}

	echo "> Checking /etc/resolv.conf"
	if ! cat /etc/resolv.conf | grep -q 'NetworkManager'; then
		echo "> Update /etc/resolv.conf to be managed by NetworkManager"
		# Remove existing resolv.conf to get rid of any symlink
		run sudo rm -i /etc/resolv.conf
		# Disable systemd-resolved
		run sudo systemctl disable --now systemd-resolved.service
		# Restart NetworkManager to generate a new resolv.conf
		run sudo systemctl restart NetworkManager.service
		# Wait for resolv.conf to be populated
		echo -n "> waiting for dns resolver "
		connection=$(get_connection)
		while ! host "${connection}.${VPN_TLD}" 1>/dev/null; do
			echo -n "."
			sleep 1
		done
		echo
		echo "> done"
	else
		echo "> All good, /etc/resolv.conf is managed by NetworkManager"
	fi

	exit 0
fi

if [ "${ACTION}" == "update-config" ]; then
	# Create temporary directory to store OpenVPN configuration files
	TMP_DIR=$(mktemp --tmpdir --directory vpn.XXXXX)
	trap "rm -r $TMP_DIR" EXIT

	for connection in $(list_connections); do
		echo "> update-config for ${connection}"

		# Delete existing connection
		if nmcli --terse --get-values connection.uuid connection show ${connection} &> /dev/null; then
			echo "  delete existing connection from NetworkManager"
			echo -n "  "
			nmcli connection delete ${connection}
		fi

		# Get new connection config
		echo "  get connection config from ${connection}.${VPN_TLD}"
		scp -qP "$VPN_PORT" "${USERNAME}@${connection}.${VPN_TLD}:${USERNAME}.ovpn" "$TMP_DIR/${connection}.conf"
		sed -i '\#up /etc/openvpn/scripts/update-systemd-resolved#d' "$TMP_DIR/${connection}.conf"
		sed -i '\#down /etc/openvpn/scripts/update-systemd-resolved#d' "$TMP_DIR/${connection}.conf"
		sed -i '\#down-pre#d' "$TMP_DIR/${connection}.conf"

		# Import connection config
		echo "  import connection config into NetworkManager"
		echo -n "  "
		nmcli connection import type openvpn file "$TMP_DIR/${connection}.conf"

		echo "  set connection options"
		# Set option: Use this connection only for resources on its network
		nmcli connection modify "${connection}" ipv4.never-default true
		nmcli connection modify "${connection}" ipv6.never-default true
	done

	exit 0
fi

print_usage

test "${ACTION}" == "help"
exit $?
