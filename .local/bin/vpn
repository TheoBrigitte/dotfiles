#!/usr/bin/env bash

set -eu

# Variables
#
# USERNAME is the ssh login name for vpn hosts
USERNAME="${USER}"
# VPN_PORT is the ssh port for vpn hosts
VPN_PORT=2222
# VPN_TLD is the top-level domain for vpn hosts
VPN_TLD="io"
# CONNECTION_SUFFIX is used to build connection names
CONNECTION_SUFFIX=".giantswarm"
# CONNECTION_NAMES are the name used for both NetworkManager connection name and as vpn host name (without tld)
CONNECTION_NAMES="vpn${CONNECTION_SUFFIX} vpn2${CONNECTION_SUFFIX}"

# Functions

print_usage() {
  echo "Usage:
  $(basename $0) [ status [ <name> ] ]              list connections state (default action)
  $(basename $0) on|off [ <name> ]                  enable or disable a connection (default name=vpn)
  $(basename $0) logs [ <name> [ options ] ]        view logs for a connection, for options see 'man journalctl' (default name=vpn)
  $(basename $0) show-config [ <name> ]             show OpenVPN configuration for connection <name> (default name=vpn)
  $(basename $0) update-config                      re-create connections with up to date OpenVPN configuration
  $(basename $0) setup [ --force ] [ --dry-run ]    configure environement to work with OpenVPN
  $(basename $0) uninstall                          uninstall environement created with the setup command
  $(basename $0) help                               print this help

Manage OpenVPN connections via NetworkManager

Arguments
  <name>		name prefix of the vpn connection (e.g. vpn)"
}

# get_connection return a single connection name
# (optional) $1 is the vpn connection name prefix
get_connection() {
	connection_prefix="${1:-vpn}"
	connections="$(nmcli connection | grep "${connection_prefix}${CONNECTION_SUFFIX}" | sort -r | awk '{print $1}')"

	echo "$connections" | head -n 1
}

# list_connections returns all connection names
list_connections() {
	echo "$CONNECTION_NAMES"
}

# Arguments
ACTION="${1:-status}"
if [ $# -gt 0 ]; then shift; fi

# status print current status for all vpn connections
if [ "${ACTION}" == "status" ]; then
	for connection in $(list_connections); do
		# OpenVPN process status
		if [ -f "/var/run/${connection}.pid" ]; then
			pid="$(cat "/var/run/${connection}.pid")"
			openvpn_status="active"
		else
			pid="none"
			openvpn_status="inactive"
		fi

		# NetworkManager connection status
		if current_status="$(nmcli --terse --get-values GENERAL.STATE connection show "${connection}" 2>/dev/null)"; then
			nm_status="$(echo "$current_status" | grep -q 'activated' && echo 'on' || echo 'off')"
		else
			nm_status="not-configured"
		fi
		echo -e "> ${connection}\t${openvpn_status}  \tconnection=${nm_status}\tpid=${pid}"
	done

	exit 0
fi

# on start an OpenVPN connection
if [ "${ACTION}" == "on" ]; then
	connection_prefix="${1:-}"
	if [ $# -gt 0 ]; then shift; fi
	connection="$(get_connection "$connection_prefix")"

	echo "> starting ${connection}"
	if nmcli connection up "${connection}" 1>/dev/null; then
		echo -n "> waiting "
		for i in $(seq 1 5); do
			echo -n "."
			if ip link show up "tun-gs-${connection%.*}" &>/dev/null; then
				echo
				echo "> connected pid=$(cat /var/run/${connection}.pid)"
				exit 0
			fi
			sleep 1
		done
		echo
	fi

        echo "> failed"
	exit 1
fi

# off stop an OpenVPN connection
if [ "${ACTION}" == "off" ]; then
	connection_prefix="${1:-}"
	if [ $# -gt 0 ]; then shift; fi
	connection="$(get_connection "$connection_prefix")"

	echo "> stopping ${connection}"
	if nmcli connection down "${connection}" 1>/dev/null; then
		echo -n "> waiting "
		for i in $(seq 1 5); do
			echo -n "."
			if ! ip link show up "tun-gs-${connection%.*}" &>/dev/null; then
				echo
				echo "> disconnected"
				exit 0
			fi
			sleep 1
		done
		echo
	fi

        echo "> failed"
	exit 1
fi

# logs print OpenVPN connection's logs
if [ "${ACTION}" == "logs" ]; then
	connection_prefix="${1:-}"
	if [ $# -gt 0 ]; then shift; fi
	connection="$(get_connection "$connection_prefix")"

	if [ -f "/var/run/${connection}.pid" ]; then
		pid="$(cat "/var/run/${connection}.pid")"
		echo "> logs for ${connection} pid=${pid}"

		pid="$(cat "/var/run/${connection}.pid")"
		journalctl_args=(--lines=100 --follow)
		if [ $# -gt 0 ]; then
			journalctl_args=($@)
		fi
		journalctl "${journalctl_args[@]}" _PID="$pid"

		exit 0
	else
		echo "> connection not found: ${connection}"
		exit 1
	fi
fi

# setup ensure current environement is correctly configured to handle OpenVPN connections
if [ "${ACTION}" == "setup" ]; then
	dry_run=false
	force=false
	if [ "${1:-}" == "--dry-run" ] || [ "${2:-}" == "--dry-run" ]; then
		dry_run=true
	fi
	if [ "${1:-}" == "--force" ] || [ "${2:-}" == "--force" ]; then
		force=true
	fi

	# run is a wrapper function to support dry-run mode.
	# dry-run=true  : will only print the command but not execute it
	# dry-run=false : will print and execute the command
	run(){
		if $dry_run; then
			echo $@
		else
		(
			set -x
			$@
		)
		fi
	}

	# Check for local DNS resolver to use systemd-resolved with stub resolv.
	# This allow for DNS requests to be routed to correct network interface
	# e.g. DNS request for github.com -> default network interface
	#      DNS request for myprivatedomain.com -> vpn network interface
	# In order for this to work the vpn server must return DNS domains list,
	# this can be verified using : resolvectl
	echo "> Checking /etc/resolv.conf"
	resolveconf_update=false
	if ! cat /etc/resolv.conf | grep -q '/run/systemd/resolve/stub-resolv.conf'; then
		if ! $force; then
			read -p "  Update /etc/resolv.conf ? (Y/n) "
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				resolveconf_update=false
			else
				resolveconf_update=true
			fi
		else
			resolveconf_update=true
		fi
	fi

	if $resolveconf_update; then
		echo "  Updating /etc/resolv.conf to be managed by systemd-resolved"
		# Remove existing resolv.conf to get rid of any symlink
		run sudo rm -f /etc/resolv.conf
		# Enable systemd-resolved
		run sudo ln -sv /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
	fi

	systemdresolved_enable=false
	if ! systemctl is-active --quiet systemd-resolved.service; then
		if ! $force; then
			read -p "  Enable systemd-resolved.service ? (Y/n) "
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				systemdresolved_enable=false
			else
				systemdresolved_enable=true
			fi
		else
			systemdresolved_enable=true
		fi
	fi

	if $systemdresolved_enable; then
		echo "  Enabling systemd-resolved"
		run sudo systemctl enable --now systemd-resolved.service
		# Wait for resolv.conf to be populated
		echo -n "> waiting for dns resolver "
		connection="$(get_connection)"
		while ! host "github.com" 1>/dev/null; do
			echo -n "."
			sleep 1
		done
		echo
	fi
	echo "  All good, /etc/resolv.conf is managed by systemd-networkd"

	# Check for NetworkManager dispatcher script to be installed.
	# This script manages OpenVPN connections as root since it is ran by NetworkManager,
	# and allow to control OpenVPN connections from userspace via NetworkManager cli (nmcli).
	echo "> Checking /etc/NetworkManager/dispatcher.d/10-openvpn"
	NM_DISPATCHER_TMP_FILE=$(mktemp --tmpdir vpn_nm_dispatcher.XXXXX)
	cat <<-EOF > ${NM_DISPATCHER_TMP_FILE}
	#!/bin/sh
	case "\$2" in
	  up)
	    if [[ "\$CONNECTION_ID" =~ ^vpn.*\.giantswarm ]]; then
	      if [ ! -f "/var/run/\${CONNECTION_ID}.pid" ]; then
		echo "start \$CONNECTION_ID"
		openvpn --verb 3 --connect-retry-max 1 --connect-timeout 5 --daemon --syslog --writepid "/var/run/\${CONNECTION_ID}.pid" --config "$HOME/.config/vpn/\${CONNECTION_ID}.conf" --dev "tun-gs-\${CONNECTION_ID%.*}"
		echo "waiting 6 sec for \$CONNECTION_ID"
		sleep 6
		if test ! -f "/var/run/\${CONNECTION_ID}.pid"; then
		    echo "failed \${CONNECTION_ID}"
		    nmcli connection down "\${CONNECTION_ID}"
		    exit 1
		fi
		echo "started \$CONNECTION_ID as pid:\$(</var/run/\${CONNECTION_ID}.pid)"
	      else
		echo "already started \$CONNECTION_ID as pid:\$(</var/run/\${CONNECTION_ID}.pid)"
	      fi
	    fi
	    ;;
	  down)
	    if [[ "\$CONNECTION_ID" =~ ^vpn.*\.giantswarm ]]; then
	      if [ -f "/var/run/\${CONNECTION_ID}.pid" ]; then
		pid=\$(</var/run/\${CONNECTION_ID}.pid)
		echo "stop \$CONNECTION_ID pid:\$pid"
		kill \$pid
		# wait for openvpn to stop, otherwise restarts will fail.
		waitpid \$pid
		echo "stopped \$CONNECTION_ID pid:\$pid"
	      else
		echo "already stopped \$CONNECTION_ID"
	      fi
	    fi
	    ;;
	esac
	EOF

	nm_dispatcher_install=false
	if [ ! -x "/etc/NetworkManager/dispatcher.d/10-openvpn" ] || ! diff "${NM_DISPATCHER_TMP_FILE}" "/etc/NetworkManager/dispatcher.d/10-openvpn" || [ $(stat --printf "%u" "/etc/NetworkManager/dispatcher.d/10-openvpn") -ne 0 ]; then
		if ! $force; then
			read -p "> Install /etc/NetworkManager/dispatcher.d/10-openvpn ? (Y/n) "
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				nm_dispatcher_install=false
			else
				nm_dispatcher_install=true
			fi
		else
			nm_dispatcher_install=true
		fi
	fi

	if $nm_dispatcher_install; then
		echo "  Installing /etc/NetworkManager/dispatcher.d/10-openvpn"
		run sudo mv "${NM_DISPATCHER_TMP_FILE}" /etc/NetworkManager/dispatcher.d/10-openvpn
		run sudo chmod +x /etc/NetworkManager/dispatcher.d/10-openvpn
		run sudo chown root: /etc/NetworkManager/dispatcher.d/10-openvpn
	else
		echo "  All good, NetworkManager dispatcher is up to date"
	fi

	# Check for update-systemd-resolved script to be installed.
	# This script ensure OpenVPN directly update DNS settings in systemd-resolved.
	# See https://github.com/jonathanio/update-systemd-resolved
	echo "> Checking update-systemd-resolved"
	systemdresolved_install=false
	if ! command -vp update-systemd-resolved &>/dev/null; then
		if ! $force; then
			read -p "  Install update-systemd-resolved ? (Y/n) "
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				systemdresolved_install=false
			else
				systemdresolved_install=true
			fi
		else
			systemdresolved_install=true
		fi
	fi

	if $systemdresolved_install; then
		echo "  Installing update-systemd-resolved"
		curl --progress-bar -O https://raw.githubusercontent.com/jonathanio/update-systemd-resolved/master/update-systemd-resolved
		chmod +x update-systemd-resolved
		sudo mv update-systemd-resolved /usr/bin/update-systemd-resolved
	else
		echo "  All good, update-systemd-resolved is installed"
	fi

	echo "> done"

	exit 0
fi

# uninstall remove all elements configured via setup.
if [ "${ACTION}" == "uninstall" ]; then
	echo "> Removing /etc/NetworkManager/dispatcher.d/10-openvpn"
	sudo rm -f /etc/NetworkManager/dispatcher.d/10-openvpn
	echo "> Removing update-systemd-resolved"
	sudo rm -f /usr/bin/update-systemd-resolved
	echo "> Removing /etc/resolv.conf"
	sudo rm -f /etc/resolv.conf
	echo "> Disabling systemd-resolved"
	sudo systemctl disable --now systemd-resolved
	echo "> Restarting NetworkManager"
	sudo systemctl restart NetworkManager.service

	echo "> done"

	exit 0
fi

# show-config prints OpenVPN config
if [ "${ACTION}" == "show-config" ]; then
	connection_prefix="${1:-}"
	if [ $# -gt 0 ]; then shift; fi
	connection="$(get_connection "$connection_prefix")"

	cat ~/.config/vpn/${connection}.conf

	exit 0
fi

# update-config updates OpenVPN connections configuration files.
if [ "${ACTION}" == "update-config" ]; then
	# Make destination
	mkdir -p ~/.config/vpn

	for connection in $(list_connections); do
		echo "> update-config for ${connection}"

		# Delete existing connection
		if nmcli --terse --get-values connection.uuid connection show "${connection}" &> /dev/null; then
			echo "  delete existing connection from NetworkManager"
			echo -n "  "
			nmcli connection delete "${connection}"
		fi

		# Get new connection config
		echo "  get connection config from ${connection}.${VPN_TLD}"
		scp -qP "$VPN_PORT" "${USERNAME}@${connection}.${VPN_TLD}:${USERNAME}.ovpn" ~/.config/vpn/${connection}.conf
		sed -i '\#up /etc/openvpn/scripts/update-systemd-resolved#d' ~/.config/vpn/${connection}.conf
		sed -i '\#down /etc/openvpn/scripts/update-systemd-resolved#d' ~/.config/vpn/${connection}.conf
		sed -i '\#down-pre#d' ~/.config/vpn/${connection}.conf

		echo "up $(command -vp update-systemd-resolved)" >> ~/.config/vpn/${connection}.conf
		echo "up-restart" >> ~/.config/vpn/${connection}.conf
		echo "down $(command -vp update-systemd-resolved)" >> ~/.config/vpn/${connection}.conf
		echo "down-pre" >> ~/.config/vpn/${connection}.conf

		# Magic fix for connection timeout
		# See https://gigantic.slack.com/archives/C52L7C6SC/p1695748910494979 https://github.com/giantswarm/vpn/pull/418
		echo "tun-mtu 1410" >> ~/.config/vpn/${connection}.conf

		# Create a dummy connection to trigger the 10-openvpn script
		echo "  setup connection into NetworkManager"
		echo -n "  "
		nmcli connection add type dummy ifname "${connection%.*}" con-name "${connection}" autoconnect no
	done

	exit 0
fi

print_usage

test "${ACTION}" == "help"
exit $?
