#!/usr/bin/env bash

set -eu

# Variables
#
# USERNAME is the ssh login name for vpn hosts
USERNAME="${USER}"

# CONNECTION_NAMES is a map of vpn connnections configuration
# Keys are connection short names used as arguments by this script
# Values are a string with the following format:
#   <name>;<url>;<port>
# where:
#   <name> : connection name in NetworkManager
#   <url>  : ssh url to download OpenVPN configuration file
#   <port> : ssh port to download OpenVPN configuration file
declare -A CONNECTION_NAMES=(
	[vpn]="vpn.giantswarm;${USERNAME}@vpn.giantswarm.io:${USERNAME}.ovpn;2222"
	[vpn2]="vpn2.giantswarm;${USERNAME}@vpn2.giantswarm.io:${USERNAME}.ovpn;2222"
)

RED='\033[0;31m'
NC='\033[0m' # No Color

# resolv.conf management
# This file is used to configure systemd-resolved as a local DNS resolver.
resolv_conf=/etc/resolv.conf
resolv_conf_target=/run/systemd/resolve/stub-resolv.conf

# systemd-resolved management
# This service is used to manage DNS resolution for the system.
systemd_resolved_service=systemd-resolved.service

# update-systemd-resolved management
# This script is used to update systemd-resolved DNS settings when OpenVPN connection is started or stopped.
systemd_resolved_script_command=update-systemd-resolved
systemd_resolved_script_url=https://raw.githubusercontent.com/jonathanio/update-systemd-resolved/master/update-systemd-resolved

# NetworkManager dispatcher script
# This script is used to start and stop OpenVPN connections via NetworkManager.
nm_dispatcher_file=/etc/NetworkManager/dispatcher.d/10-openvpn
# shellcheck disable=SC2016
nm_dispatcher_script='#!/bin/sh
case "$2" in
  up)
    if [[ "$CONNECTION_ID" =~ ^vpn.*\.giantswarm ]]; then
      if [ ! -f "/var/run/${CONNECTION_ID}.pid" ]; then
echo "start $CONNECTION_ID"
openvpn --verb 3 --connect-retry-max 1 --connect-timeout 5 --daemon --syslog --writepid "/var/run/${CONNECTION_ID}.pid" --config "'"$HOME"'/.config/vpn/${CONNECTION_ID}.conf" --dev "tun-gs-${CONNECTION_ID%.*}"
echo "waiting 6 sec for $CONNECTION_ID"
sleep 6
if test ! -f "/var/run/${CONNECTION_ID}.pid"; then
    echo "failed ${CONNECTION_ID}"
    nmcli connection down "${CONNECTION_ID}"
    exit 1
fi
echo "started $CONNECTION_ID as pid:$(</var/run/${CONNECTION_ID}.pid)"
      else
echo "already started $CONNECTION_ID as pid:$(</var/run/${CONNECTION_ID}.pid)"
      fi
    fi
    ;;
  down)
    if [[ "$CONNECTION_ID" =~ ^vpn.*\.giantswarm ]]; then
      if [ -f "/var/run/${CONNECTION_ID}.pid" ]; then
pid=$(</var/run/${CONNECTION_ID}.pid)
echo "stop $CONNECTION_ID pid:$pid"
kill $pid
# wait for openvpn to stop, otherwise restarts will fail.
waitpid $pid
echo "stopped $CONNECTION_ID pid:$pid"
      else
echo "already stopped $CONNECTION_ID"
      fi
    fi
    ;;
esac
'

# Functions

print_usage() {
  bin_name="$(basename "$0")"
  echo "Usage:
  $bin_name [ status [ <name> ] ]              list connections state (default action)
  $bin_name on|off [ <name> ]                  enable or disable a connection (default name=vpn)
  $bin_name logs [ <name> [ options ] ]        view logs for a connection, for options see 'man journalctl' (default name=vpn)
  $bin_name show-config [ <name> ]             show OpenVPN configuration for connection <name> (default name=vpn)
  $bin_name update-config                      (re-)create connections with up to date OpenVPN configuration
  $bin_name install [ --force ] [ --dry-run ]  configure environement to work with OpenVPN
  $bin_name uninstall [ --dry-run ]            uninstall environement created with the install command
  $bin_name help                               print this help

Manage OpenVPN connections via NetworkManager

Arguments
  <name>		name prefix of the vpn connection (e.g. vpn)"
}

# get_connection return a single connection name
# (optional) $1 is the vpn connection short name
get_connection() {
	connection_name="${1:-}"
	if [[ -v "CONNECTION_NAMES[$connection_name]" ]]; then
		readarray -d ';' -t config < <(echo -n "${CONNECTION_NAMES[$connection_name]}")
		connection="${config[0]}"
		echo "$connection"
	else
		echo "$connection_name"
	fi
}

# get_connection_or_first_active return the first active connection or the one specified
get_connection_or_first_active() {
	if [ $# -gt 0 ] && [ -n "$1" ]; then
		get_connection "$1"
		return
	fi

	first_connection_name=""
	for connection_name in "${!CONNECTION_NAMES[@]}"; do
		readarray -d ';' -t config < <(echo -n "${CONNECTION_NAMES[$connection_name]}")
		connection="${config[0]}"

		if [ -z "$first_connection_name" ]; then
			first_connection_name="$connection"
		fi

		if [ -f "/var/run/${connection}.pid" ]; then
			# Found an active connection
			echo "$connection"
			return
		fi
	done

	# No active connection found, return the first one
	echo "$first_connection_name"
}

setup_resolv_conf_ok() {
	test "$(readlink -nf "$resolv_conf") = $resolv_conf_target"
}

setup_systemd_resolved_ok() {
	systemctl is-active --quiet "$systemd_resolved_service"
}

setup_systemd_resolved_script_ok() {
	command -vp "$systemd_resolved_script_command" &>/dev/null
}

setup_nm_dispatcher_ok() {
	[ -x "$nm_dispatcher_file" ] && \
		diff -q <(echo -n "${nm_dispatcher_script}") "$nm_dispatcher_file" &>/dev/null && \
		[ "$(stat --printf "%u" "$nm_dispatcher_file")" -eq 0 ]
}

setup_check() {
	if ! setup_resolv_conf_ok; then
		echo -e "> ${RED}setup broken: $resolv_conf is not managed by systemd-resolved${NC}"
	fi
	if ! setup_systemd_resolved_ok; then
		echo -e "> ${RED}setup broken: $systemd_resolved_service is not running${NC}"
	fi
	if ! setup_systemd_resolved_script_ok; then
		echo -e "> ${RED}setup broken: $systemd_resolved_script_command not found${NC}"
	fi
	if ! setup_nm_dispatcher_ok; then
		echo -e "> ${RED}setup broken: $nm_dispatcher_file is broken${NC}"
	fi
}

# Arguments
ACTION="${1:-status}"
if [ $# -gt 0 ]; then shift; fi

# status print current status for all vpn connections
if [ "${ACTION}" == "status" ]; then
	setup_check

	for connection_name in "${!CONNECTION_NAMES[@]}"; do
		readarray -d ';' -t config < <(echo -n "${CONNECTION_NAMES[$connection_name]}")
		connection="${config[0]}"

		# OpenVPN process status
		if [ -f "/var/run/${connection}.pid" ]; then
			pid="$(cat "/var/run/${connection}.pid")"
			openvpn_status="active"
		else
			pid="none"
			openvpn_status="inactive"
		fi

		# NetworkManager connection status
		if current_status="$(nmcli --terse --get-values GENERAL.STATE connection show "${connection}" 2>/dev/null)"; then
			nm_status="$(echo "$current_status" | grep -q 'activated' && echo 'on' || echo 'off')"
		else
			nm_status="not-configured"
		fi
		echo -e "> ${connection_name}\t${openvpn_status}  \tconnection=${nm_status}\tpid=${pid}"
	done

	exit 0
fi

# on start an OpenVPN connection
if [ "${ACTION}" == "on" ]; then
	setup_check

	connection_name="${1:-}"
	if [ $# -gt 0 ]; then shift; fi
	connection="$(get_connection_or_first_active "$connection_name")"

	echo "> starting ${connection}"
	if nmcli connection up "${connection}" 1>/dev/null; then
		echo -n "> waiting "
		for i in $(seq 1 5); do
			echo -n "."
			if ip link show up "tun-gs-${connection%.*}" &>/dev/null; then
				echo
				echo "> connected pid=$(cat "/var/run/${connection}.pid")"
				exit 0
			fi
			sleep 1
		done
		echo
	fi

	echo -e "> ${RED}failed${NC}"
	exit 1
fi

# off stop an OpenVPN connection
if [ "${ACTION}" == "off" ]; then
	connection_name="${1:-}"
	if [ $# -gt 0 ]; then shift; fi
	connection="$(get_connection_or_first_active "$connection_name")"

	echo "> stopping ${connection}"
	if nmcli connection down "${connection}" 1>/dev/null; then
		echo -n "> waiting "
		for (( i=0; i<5; i++ )); do
			echo -n "."
			if ! ip link show up "tun-gs-${connection%.*}" &>/dev/null; then
				echo
				echo "> disconnected"
				exit 0
			fi
			sleep 1
		done
		echo
	fi

	echo -e "> ${RED}failed${NC}"
	exit 1
fi

# logs print OpenVPN connection's logs
if [ "${ACTION}" == "logs" ]; then
	connection_name="${1:-}"
	if [ $# -gt 0 ]; then shift; fi
	connection="$(get_connection_or_first_active "$connection_name")"

	if [ -f "/var/run/${connection}.pid" ]; then
		pid="$(cat "/var/run/${connection}.pid")"
		echo "> logs for ${connection} pid=${pid}"

		pid="$(cat "/var/run/${connection}.pid")"
		journalctl_args=(--lines=100 --follow)
		if [ $# -gt 0 ]; then
			journalctl_args=("$@")
		fi
		journalctl "${journalctl_args[@]}" _PID="$pid"

		exit 0
	else
		echo -e "> ${RED}connection not found: ${connection}${NC}"
		exit 1
	fi
fi

# install ensure current environement is correctly configured to handle OpenVPN connections
if [ "${ACTION}" == "install" ]; then
	dry_run=false
	force=false
	if [ "${1:-}" == "--dry-run" ] || [ "${2:-}" == "--dry-run" ]; then
		dry_run=true
	fi
	if [ "${1:-}" == "--force" ] || [ "${2:-}" == "--force" ]; then
		force=true
	fi

	# run is a wrapper function to support dry-run mode.
	# dry-run=true  : will only print the command but not execute it
	# dry-run=false : will print and execute the command
	run(){
		if $dry_run; then
			echo "dry_run: $*" 1>&2
		else
		(
			set -x
			"$@"
		)
		fi
	}

	# Check for local DNS resolver to use systemd-resolved with stub resolv.
	# This allow for DNS requests to be routed to correct network interface
	# e.g. DNS request for github.com -> default network interface
	#      DNS request for myprivatedomain.com -> vpn network interface
	# In order for this to work the vpn server must return DNS domains list,
	# this can be verified using : resolvectl
	echo "> Checking $resolv_conf"
	resolveconf_update=false
	if ! setup_resolv_conf_ok; then
		if ! $force; then
			read -r -p "  Update $resolv_conf ? (Y/n) "
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				resolveconf_update=false
			else
				resolveconf_update=true
			fi
		else
			resolveconf_update=true
		fi
	fi

	if $resolveconf_update; then
		echo "  Updating $resolv_conf to be managed by systemd-resolved"
		# Remove existing resolv.conf to get rid of any symlink
		run sudo rm -f "$resolv_conf"
		# Enable systemd-resolved
		run sudo ln -sv "$resolv_conf_target" "$resolv_conf"
	fi

	systemdresolved_enable=false
	if ! setup_systemd_resolved_ok; then
		if ! $force; then
			read -r -p "> Enable $systemd_resolved_service ? (Y/n) "
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				systemdresolved_enable=false
			else
				systemdresolved_enable=true
			fi
		else
			systemdresolved_enable=true
		fi
	fi

	if $systemdresolved_enable; then
		echo "  Enabling systemd-resolved"
		run sudo systemctl enable --now "$systemd_resolved_service"
		# Wait for resolv.conf to be populated
		echo -n "> waiting for dns resolver "
		connection="$(get_connection)"
		while ! host "github.com" 1>/dev/null; do
			echo -n "."
			sleep 1
		done
		echo
	fi
	echo "  All good, $resolv_conf is managed by systemd-networkd"

	# Check for NetworkManager dispatcher script to be installed.
	# This script manages OpenVPN connections as root since it is ran by NetworkManager,
	# and allow to control OpenVPN connections from userspace via NetworkManager cli (nmcli).
	echo "> Checking $nm_dispatcher_file"

	nm_dispatcher_install=false
	if ! setup_nm_dispatcher_ok; then
		if ! $force; then
			read -r -p "> Install $nm_dispatcher_file ? (Y/n) "
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				nm_dispatcher_install=false
			else
				nm_dispatcher_install=true
			fi
		else
			nm_dispatcher_install=true
		fi
	fi

	if $nm_dispatcher_install; then
		echo "  Installing $nm_dispatcher_file"
		# Make it more complicated to allow dry run
		run echo -n "$nm_dispatcher_script" | run sudo tee "$nm_dispatcher_file" 1>/dev/null
		run sudo chmod +rx "$nm_dispatcher_file"
		run sudo chown root: "$nm_dispatcher_file"
	else
		echo "  All good, NetworkManager dispatcher is up to date"
	fi

	# Check for update-systemd-resolved script to be installed.
	# This script ensure OpenVPN directly update DNS settings in systemd-resolved.
	# See https://github.com/jonathanio/update-systemd-resolved
	echo "> Checking update-systemd-resolved"
	systemdresolved_install=false
	if ! setup_systemd_resolved_script_ok; then
		if ! $force; then
			read -r -p "  Install update-systemd-resolved ? (Y/n) "
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				systemdresolved_install=false
			else
				systemdresolved_install=true
			fi
		else
			systemdresolved_install=true
		fi
	fi

	if $systemdresolved_install; then
		echo "  Installing update-systemd-resolved"
		curl --progress-bar -O "$systemd_resolved_script_url"
		chmod +x update-systemd-resolved
		sudo mv update-systemd-resolved /usr/bin/update-systemd-resolved
	else
		echo "  All good, update-systemd-resolved is installed"
	fi

	echo "> done"

	exit 0
fi

# uninstall remove all elements configured via install.
if [ "${ACTION}" == "uninstall" ]; then
	dry_run=false
	if [ "${1:-}" == "--dry-run" ] || [ "${2:-}" == "--dry-run" ]; then
		dry_run=true
	fi

	# run is a wrapper function to support dry-run mode.
	# dry-run=true  : will only print the command but not execute it
	# dry-run=false : will print and execute the command
	run(){
		if $dry_run; then
			echo "dry_run: $*"
		else
		(
			set -x
			"$@"
		)
		fi
	}

	echo "> Removing $nm_dispatcher_file"
	run sudo rm -f "$nm_dispatcher_file"
	echo "> Removing $systemd_resolved_script_command"
	run sudo rm -f /usr/bin/update-systemd-resolved
	echo "> Removing $resolv_conf"
	run sudo rm -f "$resolv_conf"
	echo "> Disabling systemd-resolved"
	run sudo systemctl disable --now "$systemd_resolved_service"
	echo "> Restarting NetworkManager"
	run sudo systemctl restart NetworkManager.service

	echo "> done"

	exit 0
fi

# show-config prints OpenVPN config
if [ "${ACTION}" == "show-config" ]; then
	connection_name="${1:-}"
	if [ $# -gt 0 ]; then shift; fi
	connection="$(get_connection_or_first_active "$connection_name")"

	cat ~/".config/vpn/${connection}.conf"

	exit 0
fi

# update-config updates OpenVPN connections configuration files.
if [ "${ACTION}" == "update-config" ]; then
	# Make destination
	mkdir -p ~/.config/vpn

	for connection_name in "${!CONNECTION_NAMES[@]}"; do
		readarray -d ';' -t config < <(echo -n "${CONNECTION_NAMES[$connection_name]}")
		connection="${config[0]}"

		echo "> update-config for ${connection}"

		# Delete existing connection
		if nmcli --terse --get-values connection.uuid connection show "${connection}" &> /dev/null; then
			echo "  delete existing connection from NetworkManager"
			echo -n "  "
			nmcli connection delete "${connection}"
		fi

		# Get new connection config
		url="${config[1]}"
		port="${config[2]}"
		connection_file=~/".config/vpn/${connection}.conf"

		echo "  get connection config from ${url}"
		scp -qP "$port" "${url}" "$connection_file"
		sed -i '\#up /etc/openvpn/scripts/update-systemd-resolved#d' "$connection_file"
		sed -i '\#down /etc/openvpn/scripts/update-systemd-resolved#d' "$connection_file"
		sed -i '\#down-pre#d' "$connection_file"

		{
			echo "up $(command -vp update-systemd-resolved)"
			echo "up-restart"
			echo "down $(command -vp update-systemd-resolved)"
			echo "down-pre"
		} >> "$connection_file"

		# Magic fix for connection timeout
		# See https://gigantic.slack.com/archives/C52L7C6SC/p1695748910494979 https://github.com/giantswarm/vpn/pull/418
		echo "tun-mtu 1410" >> "$connection_file"

		# Create a dummy connection to trigger the 10-openvpn script
		echo "  setup connection into NetworkManager"
		echo -n "  "
		nmcli connection add type dummy ifname "${connection%.*}" con-name "${connection}" autoconnect no
	done

	exit 0
fi

print_usage

test "${ACTION}" == "help"
exit $?
