#!/usr/bin/env bash

set -u

SCRIPT_DIR="$( cd "$( dirname "$0" )" && pwd )"
FORCE=false

function main() {
    detect_force "$@"

    install_packages
    install_oh_my_zsh
    #install_zsh_sync
    install_theo_tools
    install_giantswarm_tools
    install_completion
    install_vim_config
    set_shell

    _printf "> install successful!"
    echo "> restart shell"
    exec -l /bin/zsh
}

function _printf() {
    fmt="%-30s%-12s%-12s\n"
    printf ${fmt} "$@"
}

function ask() {
    if ${FORCE}; then
        _printf "> $1 (forced)"
        return 0
    fi

    read -n1 -p "> $1 ? [yN] " REPLY
    _printf
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        return 0
    else
        return 1
    fi
}

function detect_force() {
    if [ $# -gt 0 ]; then
        if [ "${1}" == "-f" ]; then
            FORCE=true
        fi
    fi
}

function detect_os() {
    _printf "> detect os"
    # [[ "$OSTYPE" == "linux-gnu" ]]
    # [[ "$OSTYPE" == "darwin"* ]]
}

function install_packages() {
    if ! ask "install packages"; then
        return 0
    fi

    case "$OSTYPE" in
      darwin*)
        _printf "> osx not implemented yet" ;;
      linux*)
        if [ -f "/etc/arch-release" ]; then
            _printf "> install packages for arch linux"
            install_packages_arch
        else
            _printf "> supported linux (arch)"
        fi ;;
      *)
        _printf "> unsupported os: ${$OSTYPE}" ;;
    esac
}

function install_packages_arch() {
    install_packages_arch_pacman
    install_packages_arch_yaourt
}

function install_packages_arch_pacman() {
    local packages=""

    for file in $(ls $HOME/.yadm/packages/arch/pacman/); do
        if ask "install pacman ${file}"; then
            packages="${packages}
$(cat "$HOME/.yadm/packages/arch/pacman/${file}")"
        fi
    done

    if [ -n "${packages}" ]; then
        sudo pacman -Sy --noconfirm ${packages}
    fi
}

function install_packages_arch_yaourt() {
    if ! command -v yaourt > /dev/null; then
        install_yaourt
    fi

    local packages=""

    for file in $(ls $HOME/.yadm/packages/arch/yaourt/); do
        if ask "install yaourt ${file}"; then
            packages="${packages}
$(cat "$HOME/.yadm/packages/arch/yaourt/${file}")"
        fi
    done

    if [ -n "${packages}" ]; then
        yaourt -Sy --noconfirm ${packages}
    fi
}

function install_yaourt() {
    # install package-query
    cd /tmp
    git clone https://aur.archlinux.org/package-query.git
    cd package-query
    makepkg -si

    # install yaourt
    cd /tmp
    git clone https://aur.archlinux.org/yaourt.git
    cd yaourt
    makepkg -si
}

function install_oh_my_zsh() {
    _printf "> install oh-my-zsh"
    if [ ! -e "$HOME/.config/zsh/oh-my-zsh" ]; then
        git clone https://github.com/robbyrussell/oh-my-zsh.git "$HOME/.config/zsh/oh-my-zsh"
    else
        _printf "> oh-my-zsh installed in" "$HOME/.config/zsh/oh-my-zsh"
    fi
}

function install_zsh_sync() {
    _printf "> install crontab for zsh history sync"
    crontab "${SCRIPT_DIR}/zsh_sync_cronjob"
}

function install_theo_tools() {
    if ! ask "install theo tools"; then
        return 0
    fi

    _printf "> install github.com/TheoBrigitte/gile"
    go install github.com/TheoBrigitte/gile

    _printf "> install golang.org/x/lint/golint"
    go get -u golang.org/x/lint/golint
}


function install_giantswarm_tools() {
    if ! ask "install giantswarm tools"; then
        return 0
    fi

    _printf "> install github.com/giantswarm/opsctl"
    go install github.com/giantswarm/opsctl

    _printf "> install github.com/giantswarm/gsctl"
    go install github.com/giantswarm/gsctl

    _printf "> install github.com/giantswarm/luigi"
    go install github.com/giantswarm/luigi

    _printf "> install github.com/giantswarm/e2e-harness"
    go install github.com/giantswarm/e2e-harness

    (
        mkdir -p "$HOME/.helm/plugins/"
        cd "$HOME/.helm/plugins/"
        git clone https://github.com/app-registry/appr-helm-plugin.git registry
        helm registry --help
    )
}

function install_completion() {
    if ! ask "install completion"; then
        return 0
    fi

    local bash_completion=".local/share/bash-completion/completions"
    local zsh_completion=".config/zsh/completion"

    opsctl completion bash > "${bash_completion}/opsctl"
    opsctl completion zsh > "${zsh_completion}/_opsctl"

    gsctl completion
    mv gsctl-completion-bash.sh "${bash_completion}/gsctl"
    mv gsctl-completion-zsh.sh "${zsh_completion}/_gsctl"

    helm completion bash > "${bash_completion}/helm"
    helm completion zsh > "${zsh_completion}/_helm"

    kubectl completion bash > "${bash_completion}/kubectl"
    kubectl completion zsh > "${zsh_completion}/_kubectl"

    minikube completion bash > "${bash_completion}/minikube"
    minikube completion zsh > "${zsh_completion}/_minikube"
}

function install_vim_config() {
    if ! ask "install vim config"; then
        return 0
    fi
    git clone https://github.com/TheoBrigitte/vim.git ~/.vim
    ~/.vim/install.sh
}

function set_shell() {
    if ! ask "set default shell to zsh"; then
        return 0
    fi
    chsh --shell /bin/zsh
}

main "$@"
